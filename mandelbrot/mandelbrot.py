(u:=__import__('math', globals(), locals(), [], 0),Decimal:=__import__('decimal', globals(), locals(), [], 0).Decimal,rgbf:=lambda r, g, b: f"\u001b[38;2;{r};{g};{b}m",rgbb:=lambda r, g, b: f"\u001b[48;2;{u.floor(r*0.45)};{u.floor(g*0.45)};{u.floor(b*0.45)}m",print("Loading colours...\n"),D:=[(0,(33,6,84)),(36,(20,7,90)),(139,(27,44,128)),(251,(65, 82, 172)),(447,(129,181,229)),(662,(191,236,253)),(898,(237,233,228)),(1052,(239,228,132)),(1437,(221,128,0)),(1576,(148,52,3)),(1699,(108,30,15)),(1766,(69,7,31)),(1889,(46,4,73)),(2048,(33,6,84))],xs:=[],ys:=[],[(xs.append(d[0]),ys.append(d[1])) for d in D],dys:=[],dxs:=[],ms:=[],[(dx:=xs[i+1]-xs[i],dy:=[ys[i+1][j]-ys[i][j] for j in range(3)],dxs.append(dx),dys.append(dy),ms.append([dy[0]/dx,dy[1]/dx,dy[2]/dx])) for i in range(13)],c1s:=[ms[0]],[(m:=ms[i],M:=ms[i+1],c1s.append([(0 if m[j]*M[j] <= 0 else (dxx:=dxs[i],D:=dxs[i+1],common:=dxx+D,(3*common/((common + D)/m[j] + (common + dxx)/M[j])))[3]) for j in range(3)])) for i in range(12)],c1s.append(ms[-1]),c2s:=[],c3s:=[],[(c1:=c1s[i], m:=ms[i], d:=[1/dxs[i] for j in range(3)],C:=[c1[j] + c1s[i+1][j] - m[j] - m[j] for j in range(3)],c2s.append([(m[j] - c1[j] - C[j])*d[j] for j in range(3)]),c3s.append([C[j]*d[j]*d[j] for j in range(3)])) for i in range(12)],L:=lambda x, j:(r:=None,ys[-1][j] if x==xs[-1] else((b:=11)if x>xs[11] else[((r:=ys[k][j]) if x == xs[k] else ((b:=k) if x<xs[k+1] and x > xs[k] else 0)) for k in range(12)],r if r!=None else(diff:=x-xs[b],diff_sq:=diff*diff,min(255,max(0,u.floor(ys[b][j] + c1s[b][j]*diff + c2s[b][j]*diff_sq + c3s[b][j]*diff*diff_sq))))[2])[1])[1],p:="█▮nc"[int(input("Render Mode:\n1. Full Pixels\n2. Grid Pixels\n3. Iteration Number\n4. Colour Space\n"))-1],[print(rgbf(L(i,0), L(i,1), L(i,2))+rgbb(L(i,0), L(i,1), L(i,2)) + "A", end="") for i in range(2048)] if p=="c" else (s:=list(map(int,input("Dimensions (e.g. 401 101): ").split(' '))),m:=lambda z,c,i,D:(t:=[z[0]**2-z[1]**2+c[0],2*z[0]*z[1]+c[1]],a:=t[0]**2+t[1]**2,i-u.log2(u.log2(a))+4if a >= (256*256) else 0 if i>=D else m(t,c,i+1,D))[2],f:=lambda d:((print(rgbf(255, 255, 255)+rgbb(0, 0,0)+'-'*(u.floor((s[0]-14)/2))+'MANDELBROT-SET'+'-'*(u.ceil((s[0]-14)/2))),[(w:=d[2],h:=(s[1]*w)/s[0],t:=[],[t.append((C:=[d[0]-w/2+(x+1)*(w/(s[0]+1)),d[1]+(2*h)/2-(y+1)*2*(h/(s[1]+1))],M:=C[0]**2+C[1]**2,0 if (256*(M*M)-96*(M)+32*C[0]-3<0 or 16*(M+2*C[0]+1)-1<0) else m([0,0],C,0,d[3]))[2]) for x in range(s[0])],print(rgbf(255, 255, 255)+rgbb(0, 0, 0)+'|'+''.join([(rgbf(0,0,0)+rgbb(0, 0, 0)if i==0 else (j:=(u.log(i*0.42)*572.6587904)%2048,rgbf(L(j,0), L(j,1), L(j,2))+rgbb(L(j,0), L(j,1), L(j,2)))[1])+(str(i)[0] if p=="n" else p)for i in t])+rgbf(255, 255, 255)+'|'))for y in range(s[1])],print('-'*(s[0]+2)))if d else 0,f(list(map(Decimal, input(rgbf(255, 255, 255)+rgbb(0, 0, 0)+"real imaginary width depth: ").split(' '))))),f(0)))